syntax = "proto3";

package chat;

option java_package = "sh.swisschili.chat.util";
option java_outer_classname = "ChatProtos";

message User {
  string name = 1;
  string id = 2;
  string host = 3;
}

message Channel {
  string id = 1;
  string name = 2;
  string description = 3;
}

message Group {
  string name = 1;
  repeated User users = 2;
  string id = 4;
}

message Message {
  string body = 1;
  User sender = 2;
  // In milliseconds
  int64 unixTime = 3;
  string id = 4;
}

message OutgoingMessage {
  Message message = 1;
  Channel channel = 2;

  bytes signature = 3;
}

message MessageResponse {
  // void
}

message CreateGroupRequest {
  string groupName = 1;
}

enum Status {
  OK = 0;
  PERMISSION_DENIED = 1;
  INVALID_REQUEST = 2;
  INCORRECT_LOGIN = 3;
};

message CreateGroupResponse {
  Status status = 1;
  Group group = 2;
}

message CreateChannelRequest {
  Group group = 1;
  string channelName = 2;
}

message CreateChannelResponse {
  Status status = 1;
  Channel channel = 2;
}

message AddUserRequest {
  string name = 1;
  string host = 2;
}

message AddUserResponse {
  Status status = 1;
  User user = 2;
}

message GroupChannelsResponse {
  repeated Channel channels = 1;
}

message GroupByNameRequest {
  string name = 1;
}

enum Presence {
  ONLINE = 0;
  AWAY = 1;
  DND = 2; // do not disturb
  OFFLINE = 3;
}

message CustomPresence {
  string name = 1;
  int32 iconCode = 2;
}

message UserStatus {
  oneof status {
    Presence presence = 1;
    CustomPresence custom = 2;
  };
  User user = 3;
}

message GroupUserStatusRequest {
  Group group = 1;
  User for = 2;
}

message SetUserStatusRequest {
  Group group = 1;
  UserStatus status = 3;
}

message SetUserStatusResponse {
}

message MessageRangeRequest {
  Channel channel = 1;
  uint32 from = 2;
  uint32 count = 3;
}

message MessageRangeResponse {
  repeated Message messages = 1;
}

service Chat {
  rpc GetMessages(Channel) returns (stream Message);
  rpc SendMessage(OutgoingMessage) returns (MessageResponse);

  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse);

  // Will get User if already exists
  rpc AddUser(AddUserRequest) returns (AddUserResponse);

  rpc GetGroupByName(GroupByNameRequest) returns (Group);
  rpc GetGroupChannels(Group) returns (GroupChannelsResponse);

  rpc GetGroupUserStatuses(GroupUserStatusRequest) returns (stream UserStatus);
  rpc SetUserStatus(SetUserStatusRequest) returns (SetUserStatusResponse);

  rpc GetMessageRange(MessageRangeRequest) returns (MessageRangeResponse);
}

message SignInRequest {
  string name = 1;
  string password = 2;
}

message SignInResponse {
  User user = 2;
}

message RegisterRequest {
  string name = 1;
  string password = 2;
  bytes publicKey = 4;
}

message Redirect {
  string to = 1;
  string message = 2;
}

message RegisterResponse {
  oneof status {
    Redirect redirect = 1;
    User user = 2;
  }
}

message PublicKeyRequest {
  User user = 1;
}

message UserPublicKey {
  bytes publicKey = 1;
}

service Auth {
  rpc SignIn(SignInRequest) returns (SignInResponse);
  rpc Register(RegisterRequest) returns (stream RegisterResponse);
  rpc GetUserPublicKey(PublicKeyRequest) returns (UserPublicKey);
}
