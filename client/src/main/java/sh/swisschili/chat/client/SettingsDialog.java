/*
Decentralized chat software
Copyright (C) 2020  swissChili

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package sh.swisschili.chat.client;

import com.github.weisj.darklaf.DarkLaf;
import com.github.weisj.darklaf.LafManager;
import com.github.weisj.darklaf.components.border.DarkBorders;
import com.github.weisj.darklaf.settings.ThemeSettings;
import com.github.weisj.darklaf.theme.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;

import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;
import org.slf4j.*;
import java.util.prefs.Preferences;

public class SettingsDialog extends JDialog {
    private JPanel rootPanel;
    private JPanel interfacePanel;
    private JButton saveButton;
    private JComboBox<Theme> themeComboBox;
    private JPanel accountPanel;
    private JButton logInRegisterButton;
    private JButton cancelButton;
    private JPanel aboutPanel;
    private JTextArea createdBySwissChiliGithubTextArea;

    private final Preferences preferences = Preferences.userNodeForPackage(getClass());

    private static final Logger LOGGER = LoggerFactory.getLogger(SettingsDialog.class.getName());

    private static Border createTitledBorder(String title) {
        return BorderFactory.createTitledBorder(
                DarkBorders.createLineBorder(1, 1, 1, 1),
                title);
    }

    public SettingsDialog(Frame owner) {
        super(owner);

        add(rootPanel);
        setMinimumSize(new Dimension(360, 300));

        interfacePanel.setBorder(createTitledBorder("Interface"));
        accountPanel.setBorder(createTitledBorder("Account"));
        aboutPanel.setBorder(createTitledBorder("About"));

        saveButton.addActionListener(e -> {
            if (themeComboBox.getSelectedItem() != null)
                preferences.put("theme.name", themeComboBox.getSelectedItem().toString());

            setVisible(false);
        });

        logInRegisterButton.setIcon(ColoredIcon.buildIcon(FontAwesome.USER_CIRCLE, 14));

        DefaultComboBoxModel<Theme> themeModel = new DefaultComboBoxModel<>();
        Arrays.asList(new DarculaTheme(), new IntelliJTheme(), new SolarizedLightTheme(),
                new SolarizedDarkTheme(), new OneDarkTheme(), new HighContrastLightTheme(), new HighContrastDarkTheme())
            .forEach(themeModel::addElement);

        themeComboBox.setModel(themeModel);

        getRootPane().setDefaultButton(saveButton);
        themeComboBox.addActionListener(e -> {
            Theme currentTheme = (Theme) themeComboBox.getSelectedItem();
            ThemeSettings themeSettings = ThemeSettings.getInstance();
            themeSettings.setTheme(currentTheme);
            themeSettings.apply();
        });
        cancelButton.addActionListener(e ->
                setVisible(false));
        logInRegisterButton.addActionListener(e -> {
            UserCredentials.clearUser();
            // lol
            System.exit(0);
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(5, 5, 5, 5), -1, -1));
        scrollPane1.setViewportView(panel1);
        interfacePanel = new JPanel();
        interfacePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(interfacePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        themeComboBox = new JComboBox();
        interfacePanel.add(themeComboBox);
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel2.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        panel2.add(saveButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accountPanel = new JPanel();
        accountPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(accountPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        logInRegisterButton = new JButton();
        logInRegisterButton.setText("Log out");
        accountPanel.add(logInRegisterButton);
        aboutPanel = new JPanel();
        aboutPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(aboutPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        createdBySwissChiliGithubTextArea = new JTextArea();
        createdBySwissChiliGithubTextArea.setEditable(false);
        createdBySwissChiliGithubTextArea.setText("Created by swissChili: github.com/swissChili/chat");
        aboutPanel.add(createdBySwissChiliGithubTextArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
