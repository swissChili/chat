package sh.swisschili.chat.client;

import com.github.weisj.darklaf.LafManager;
import com.github.weisj.darklaf.theme.IntelliJTheme;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import sh.swisschili.chat.util.ChatGrpc;
import sh.swisschili.chat.util.ChatGrpc.ChatStub;
import sh.swisschili.chat.util.ChatProtos.*;
import sh.swisschili.chat.util.Constants;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.logging.Logger;

public class MainWindow {
    private JPanel panel1;
    private JButton sendButton;
    private JTextField messageField;
    private JList<Message> messages;
    private JList<Group> groups;
    private JList<Channel> channels;
    private JList<User> users;

    private final DefaultListModel<Message> messageModel = new DefaultListModel<>();
    private static final Logger LOGGER = Logger.getLogger(MainWindow.class.getName());

    private final ChatStub chatStub;

    private final Channel defaultChannel = Channel.newBuilder()
            .setId(1)
            .setName("test")
            .setDescription("Test channel")
            .build();

    public MainWindow() {
        final ActionListener sendActionListener = e -> sendMessage();

        messages.setSelectionModel(new NoSelectionModel());

        sendButton.addActionListener(sendActionListener);
        messageField.addActionListener(sendActionListener);
        messages.setCellRenderer(new MessageCell());
        messages.setModel(messageModel);

        LOGGER.info("Connecting to chat server");
        io.grpc.Channel channel = ManagedChannelBuilder.forAddress("localhost", Constants.DEFAULT_SERVER_PORT).usePlaintext().build();
        chatStub = ChatGrpc.newStub(channel);

        chatStub.getMessages(defaultChannel, new StreamObserver<Message>() {
            @Override
            public void onNext(Message value) {
                LOGGER.info("Received message from " + value.getSender());
                messageModel.addElement(value);
            }

            @Override
            public void onError(Throwable t) {
                LOGGER.warning("Received error " + t.toString());
            }

            @Override
            public void onCompleted() {
                LOGGER.warning("getMessages completed");
            }
        });
    }

    protected void sendMessage() {
        if (messageField.getText().isBlank())
            return;

        LOGGER.info("Message sent " + messageField.getText());

        User.Builder userBuilder = User.newBuilder().setName("Me").setId(1);

        Message message = Message.newBuilder()
                .setBody(messageField.getText())
                .setSender(userBuilder.build())
                .setUnixTime(System.currentTimeMillis())
                .build();

        messageField.setText("");

        LOGGER.info("Sending message to server");

        OutgoingMessage outgoingMessage = OutgoingMessage.newBuilder()
                .setChannel(defaultChannel)
                .setMessage(message)
                .build();

        chatStub.sendMessage(outgoingMessage, new StreamObserver<MessageResponse>() {
            @Override
            public void onNext(MessageResponse value) {
            }

            @Override
            public void onError(Throwable t) {
            }

            @Override
            public void onCompleted() {
                LOGGER.info("Message sent successfully");
            }
        });
    }

    public static void main(String[] args) {
        LafManager.setTheme(new IntelliJTheme());
        LafManager.install();

        JFrame frame = new JFrame("Chat");
        frame.setContentPane(new MainWindow().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setMinimumSize(new Dimension(912, 640));
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        panel1.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JSplitPane splitPane2 = new JSplitPane();
        splitPane2.setContinuousLayout(true);
        splitPane2.setResizeWeight(1.0);
        splitPane1.setRightComponent(splitPane2);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        splitPane2.setLeftComponent(panel2);
        messages = new JList();
        panel2.add(messages, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        panel2.add(sendButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageField = new JTextField();
        messageField.setText("");
        panel2.add(messageField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane2.setRightComponent(panel3);
        users = new JList();
        panel3.add(users, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setLeftComponent(panel4);
        groups = new JList();
        panel4.add(groups, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        channels = new JList();
        panel4.add(channels, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
